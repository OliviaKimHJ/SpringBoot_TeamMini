

// 마커를 담을 배열입니다
var markers = [];
// searchMap id map에 지도 표시해주는 부분
var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
    mapOption = {
        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
        level: 3 // 지도의 확대 레벨
    };  

// 지도를 생성합니다    
var map = new kakao.maps.Map(mapContainer, mapOption); 

// 장소 검색 객체를 생성합니다
var ps = new kakao.maps.services.Places();  

// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
var infowindow = new kakao.maps.InfoWindow({zIndex:1});

// 키워드로 장소를 검색합니다
// 페이지 로드되자마자 호출됨 -> 내가 input에 적어논 값을 불러온다.
searchPlaces();

// 키워드 검색을 요청하는 함수입니다
 
function searchPlaces() {

    var keyword = document.getElementById('keyword').value;

    if (!keyword.replace(/^\s+|\s+$/g, '')) {
        alert('키워드를 입력해주세요!');
        return false;
    }

    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
    ps.keywordSearch( keyword, placesSearchCB); 
}

// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
function placesSearchCB(data, status, pagination) {
    if (status === kakao.maps.services.Status.OK) {

        // 정상적으로 검색이 완료됐으면
        // 검색 목록과 마커를 표출합니다
        displayPlaces(data);

        // 페이지 번호를 표출합니다
        displayPagination(pagination);

    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {

        alert('검색 결과가 존재하지 않습니다.');
        return;

    } else if (status === kakao.maps.services.Status.ERROR) {

        alert('검색 결과 중 오류가 발생했습니다.');
        return;

    }
}

// 검색 결과 목록과 마커를 표출하는 함수입니다
function displayPlaces(places) {

    var listEl = document.getElementById('placesList'), 
    menuEl = document.getElementById('menu_wrap'),
    fragment = document.createDocumentFragment(), 
    bounds = new kakao.maps.LatLngBounds(), 
    listStr = '';
    
    // 검색 결과 목록에 추가된 항목들을 제거합니다
    removeAllChildNods(listEl);

    // 지도에 표시되고 있는 마커를 제거합니다
    removeMarker();
    
    for ( var i=0; i<places.length; i++ ) {

        // 마커를 생성하고 지도에 표시합니다
        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
            marker = addMarker(placePosition, i), 
            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다

        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
        // LatLngBounds 객체에 좌표를 추가합니다
        bounds.extend(placePosition);

        // 마커와 검색결과 항목에 mouseover 했을때
        // 해당 장소에 인포윈도우에 장소명을 표시합니다
        // mouseout 했을 때는 인포윈도우를 닫습니다
        (function(marker, title) {
            kakao.maps.event.addListener(marker, 'mouseover', function() {
                displayInfowindow(marker, title);
            });
			
			// 추가 작업!!!
//			var listEl = document.getElementById('placesList');
//   		var menuEl = document.getElementById('menu_wrap');
            // 마커 클랙했을 때  									// 마커클릭시 위도경도를 place에 넣어줌
			kakao.maps.event.addListener(marker, 'click', (function(placePosition) {
				
				console.log(placePosition);
		    	displayInfowindow(marker, title); // 내가 올린 마커에 해당하는 타이틀 보여주는 코드
		    	return function() {
			        
			        let la = placePosition.La;	// 위도
			        let ma = placePosition.Ma;	// 경도
			        
			        let cnt = 0; // 중복검사 하려고 
			        
			        for(let i=0; i<3; i++) {
						
						for(let j=0; j<3; j++){
							// title : 선택한 마커에대한 장소 이름 palceName : input박스에 들어간 값
							// placeName input이 3개이기 떄문에 3번 굴려본다. 이중으로 
							// 현재 내가 클릭한 마커에대한 값 == 이미 input에 들어가있는 값
							if(title == $('.placeName').eq(j).val() 
								&& la == $('.latitude').eq(j).val() 
								&& ma == $('.longitude').eq(j).val()){
									cnt++;
								}
						}
						if(cnt >= 1){ // 위에 코드가 일치하여 cnt가 증가할 떄 작동하는 코드
							alert('중복 된 장소가 있습니다.');
							break;
						}
								
						if($('.placeName').eq(i).val() == '') {
							// 값이 없으면 각 input에 값을 넣어줘라
							$('.placeName').eq(i).val(title);	
							$('.latitude').eq(i).val(la);
			       			$('.longitude').eq(i).val(ma);
									
			        		clearBtn();
							break;
						}			
					} // for
				}
			})(placePosition));
			
			console.log(placePosition.La);
			console.log(placePosition.Ma);
			console.log(title);
			// input에 넣어둔 여러 x버튼을 눌렀을 때(ALL)
			var btnClear = document.querySelectorAll('.btnClear');

			btnClear.forEach(function(btn){ // x버튼이 여러개이니깐
				btn.addEventListener('click', function(e){addMarker
				// btn으 부모 태그의 input 태그를 찾아라 빈값을 넣어줘라
					btn.parentNode.querySelector('input').value = "";
					// 내용을 지웠으면 x버튼 지우기
					e.target.style.display = 'none';

				})
			})
			
			// 추가작업 여기까지!!!
			
            kakao.maps.event.addListener(marker, 'mouseout', function() {
                infowindow.close();
            });

            itemEl.onmouseover =  function () {
                displayInfowindow(marker, title);
            };

            itemEl.onmouseout =  function () {
                infowindow.close();
            };
        })(marker, places[i].place_name);

        fragment.appendChild(itemEl);
    }

    // 검색결과 항목들을 검색결과 목록 Element에 추가합니다
    listEl.appendChild(fragment);
    menuEl.scrollTop = 0;

    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
    map.setBounds(bounds);
}

// search input 의 x 이미지 노출여부 결정하는 메서드
// 어디서 호출되는가 -> 
function clearBtn() {
	for(let i=0; i<3; i++){
		
		if ($(".placeName").eq(i).val() == '') {	// input 값이 없으면

            $('.btnClear').eq(i).css({
                'display': 'none'
            });

        } else { 		// input 값이 있으면
        
            $('.btnClear').eq(i).css({
            	'display': 'inline-block'
            });

        }
	}
}


// 검색결과 항목을 Element로 반환하는 함수입니다
function getListItem(index, places) {

    var el = document.createElement('li'),
    itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
                '<div class="info">' +
                '   <h5>' + places.place_name + '</h5>';

    if (places.road_address_name) {
        itemStr += '    <span>' + places.road_address_name + '</span>' +
                    '   <span class="jibun gray">' +  places.address_name  + '</span>';
    } else {
        itemStr += '    <span>' +  places.address_name  + '</span>'; 
    }
                 
      itemStr += '  <span class="tel">' + places.phone  + '</span>' +
                '</div>';           

    el.innerHTML = itemStr;
    el.className = 'item';

    return el;
}

// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
function addMarker(position, idx, title) {
    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기
        imgOptions =  {
            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
            spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
        },
        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
            marker = new kakao.maps.Marker({
            position: position, // 마커의 위치
            image: markerImage 
        });

    marker.setMap(map); // 지도 위에 마커를 표출합니다
    markers.push(marker);  // 배열에 생성된 마커를 추가합니다

    return marker;
}

// 지도 위에 표시되고 있는 마커를 모두 제거합니다
function removeMarker() {
    for ( var i = 0; i < markers.length; i++ ) {
        markers[i].setMap(null);
    }   
    markers = [];
}

// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
function displayPagination(pagination) {
    var paginationEl = document.getElementById('pagination'),
        fragment = document.createDocumentFragment(),
        i; 

    // 기존에 추가된 페이지번호를 삭제합니다
    while (paginationEl.hasChildNodes()) {
        paginationEl.removeChild (paginationEl.lastChild);
    }

    for (i=1; i<=pagination.last; i++) {
        var el = document.createElement('a');
        el.href = "#";
        el.innerHTML = i;

        if (i===pagination.current) {
            el.className = 'on';
        } else {
            el.onclick = (function(i) {
                return function() {
                    pagination.gotoPage(i);
                }
            })(i);
        }

        fragment.appendChild(el);
    }
    paginationEl.appendChild(fragment);
}

// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
// 인포윈도우에 장소명을 표시합니다
function displayInfowindow(marker, title) {
    var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';

    infowindow.setContent(content);
    infowindow.open(map, marker);
}

 // 검색결과 목록의 자식 Element를 제거하는 함수입니다
function removeAllChildNods(el) {   
    while (el.hasChildNodes()) {
        el.removeChild (el.lastChild);
    }
}


// searchMap에서 선택버튼 눌렀을 때 발생하는 이벤트 리스너
// 데이터를 담아서 서버로 보내고 DB에 저장하기 위함
$('.choose').on('click', function(){
/*	
	let arr = {};
	let placeName_ = [];
	let latitude_ = [];
	let longitude_ = [];
	for(let i=0; i<3; i++) {
		
		placeName_.push($('.placeName').eq(i).val());
		latitude_.push($('.latitude').eq(i).val());
		longitude_.push($('.longitude').eq(i).val());
		
	}
	
	arr.placeName = placeName_;
	arr.latitude = latitude_;
	arr.longitude = longitude_;
*/		
	// 배열
	let data = [];
	
	for(let i=0; i<3; i++) {
		let arr = {};		// object
		
		if($('.placeName').eq(i).val() != '') { // 장소이름이 빈칸이 아닐 떄에만
		
			arr.placeName = $('.placeName').eq(i).val();
			arr.latitude = $('.latitude').eq(i).val();
			arr.longitude = $('.longitude').eq(i).val();
			
			console.log(arr);
			
			data.push(arr); // arr이라는 object를 배열 data에 넣어줌 
			
			console.log(data);
		}
	}

	console.log(data);
	
	$.ajax({
		url : "/searchPlace/addPlace", //controller로 보내줌
		method : "post",
		data: {
				list : JSON.stringify(data) // 배결안에 object니깐 JSON으로 변경해서 list에 넣어줌 list는 즉 key값
			}, //serchPalceController에 String list로 불러옴
		dataType: 'json',
		success : function (data){ // serchPalceController에서 addPlace가 다 구현되면 return값으로 넘어온는 구간
			console.log(data);
			
			let j=0;
			
			for(let i=0; i<3; i++) {
				// 부모창에 각 값을 넣어줘야한다. 
	 			if($('.placeName').eq(i).val() != '') {
	         		$('.place', opener.document).eq(i).val($('.placeName').eq(i).val());
//	         		$('.latitude', opener.document).eq(i).val($('.latitude').eq(i).val());
//	         		$('.longitude', opener.document).eq(i).val($('.longitude').eq(i).val());
	         		$('.pcode', opener.document).eq(i).val(data[j]);
	         		j++; // 3개를 항상 채우는게 아니여서(가운데가 비어질 수 도 있으니) j를 따로 보내줌
	         	}
	         }
			window.close();
		}
	});
   
});

//opener.document : 나를 열였던 창에 대한 것






